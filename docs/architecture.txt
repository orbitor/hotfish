Don't be silly, painful is better.

"Brevity is the by-product of vigor"
            -- e.b. white

class HfViewController : public HfObject
{
    public:
        HfViewController(HfObject *View);
        virtual ~HfViewController();

        /* yadda yadda yadda */
};

C++ has no style. It once had promise, but has become gooey, gangly, and
kind of gross. It has been coerced into work for which it was originally
unintended. Like using a pick-axe to mow the lawn. It is brutish and
ugly, and often requires of the user far more work than originally
anticipated.

So much for a vision statement.

Implementing hotfish in C is not going to be easy and will not make for
beautiful code, either. But, everything should be clear to the user. And,
for my money, clarity is beauty.

Not alot of tricks -- hey, look how smart I am, cause I'm not -- just a
simple design pattern.

Structures are objects
Protocols are structures
Functions are protocols
Codes are functions
Statements are code
Syntax is tea leaves

Pancakes are love.


* A note about comparator functions
-------------------------------------------------
Any object should have a comparator function. Specifically, objects like
numbers should have a comparator function. The generic data object should
have comparator functions.

Comparator functions will be used to sort and filter collections of
objects -- so, the default versions may not always be appropriate for
every use case.

For a number, there should probably be multiple comparator functions -- one
for each type of number (integer, unsigned, float, double) that should be
substitutable by the user. So, if we have one comparator function that
is the front end for deciding on what type of comparator we are going to
call, the user should be able to substitute the ultimate function which is
called to do the comparison.

if (num1->compare(num1, num2) == HFCompareEqual) {}

where

HFNumberCompare(const HFNumber* num1, const HFNumber* num2)
{
    if (num1->numType(num1) == HFNumTypeFloat)
    {
        num1->compareFloat(num1, num2);
    }
}

calls (by default)

HFCompareEval HFNumberCompareFloat(const HFNumber* num1, const HFNumber* num2)
{
    float comp1 = num1->valFloat(num1);
    float comp2 = num2->valFloat(num2);
    HFComparatorEval retval = NFCompareEqual;

    if (comp1 < comp2)
    {
        retval = HFCompareLessThan;
    }
    else if (comp1 > comp2)
    {
        retval = HFCompareGreaterThan;
    }

    return retval;
}

Specifically, for floats and doubles, the values may need to be dithered --
as in +/- some dither value.

The user could replace the comparator function in a number for floats
(probably in some object factory function)

HFNumber* UserNumberAllocInitAsFloat(float val)
{
    HFNumber* number = HFNumberAllocInitAsFloat(val);
    number->setFloatComparator(UserNumberCompareFloat);
}

where 'UserNumberCompareFloat' conforms to the substitute "protocol" of
HFNumber:

HFCompareEval UserNumberCompareFloat(const HFNumber* num1,
        const HFNumber* num2)
{
}

